import logging

from aiogram import types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery

from scripts.handlers import basic_handlers
from scripts import states
from scripts.utils import *
from scripts import keyboards


@dp.callback_query(F.data == 'cancel')
async def cancel_process_cb(call: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.reply("–•–æ—Ä–æ—à–æ, –∑–∞–±—ã–ª–∏.")
    await call.message.delete_reply_markup()
    await call.answer()


@dp.message(F.text == keyboards.bt_settings.text)
async def settings(msg: types.Message):
    await msg.answer("‚öô –î–∞–≤–∞–π—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏–º...", reply_markup=keyboards.kb_settings)


@dp.message(F.text == keyboards.bt_back.text)
async def restore_keyboard(msg: types.Message):
    await msg.answer("üëå –•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º...", reply_markup=keyboards.kb_main)


@dp.message(F.text == keyboards.bt_mailing_config.text)
async def configure_mailing(msg: types.Message, state: FSMContext):
    if not await validate_user(msg.from_user.id):
        logging.info(f"user validation failed - id: {msg.from_user.id}, username: @{msg.from_user.username}")
        return

    logging.info(f"attempted configure mailing - id: {msg.from_user.id}, username: @{msg.from_user.username}")

    if db.get_mailing_time(msg.from_user.id):
        await cancel_mailing(msg, state)
        return

    await msg.answer("üîî –•–æ—á–µ—à—å –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ <b>—Ä–∞—Å—Å—ã–ª–∫—É</b> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?\n\n"
                     "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å –±–æ—Ç –±—É–¥–µ—Ç –Ω–∞—á–∏–Ω–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∞—Ç—å <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–π –¥–µ–Ω—å –≤ 18:00</b>.\n"
                     "–†–∞—Å—Å—ã–ª–∫–∞ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è, –æ–±—ã—á–Ω–æ –æ–∫–æ–ª–æ –ø–æ–ª—É—á–∞—Å–∞. "
                     "–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –∫–∞–∫ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è, —Ç–∞–∫ –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline_bt_confirm], [keyboards.inline_bt_cancel]]))
    await state.set_state(states.Mailing.Subscribe)


@dp.callback_query(states.Mailing.Subscribe)
async def set_mailing(call: types.CallbackQuery, state: FSMContext):
    db.set_mailing_time(call.from_user.id, '18:00')
    await state.clear()
    await call.answer()

    logging.info(f"subscribed to mailing - id: {call.from_user.id}, username: @{call.from_user.username}")

    await call.message.edit_text(
        "ü§ñ –•–æ—Ä–æ—à–æ, –≤ —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑, –∫–æ–≥–¥–∞ –±—É–¥—É —Ä–∞—Å—Å—ã–ª–∞—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–ø–∏—à—É –∏ —Ç–µ–±–µ!")


async def cancel_mailing(msg: types.Message, state: FSMContext):
    await msg.answer("üîï –•–æ—á–µ—à—å –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç <b>—Ä–∞—Å—Å—ã–ª–∫–∏</b> —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è?\n\n"
                     "–†–∞—Å—Å—ã–ª–∫–∞ <b>–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è</b>, –æ–±—ã—á–Ω–æ –æ–∫–æ–ª–æ –ø–æ–ª—É—á–∞—Å–∞. "
                     "–ï—Å–ª–∏ –∂–¥–∞—Ç—å —É–∂–µ –Ω–∞–¥–æ–µ–ª–æ –∏ –¥—É–º–∞–µ—à—å, —á—Ç–æ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω—É, "
                     "—Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞.\n"
                     "–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—à—å –∫–∞–∫ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è, —Ç–∞–∫ –∏ –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è —Å–Ω–æ–≤–∞.",
                     reply_markup=InlineKeyboardMarkup(inline_keyboard=[[keyboards.inline_bt_confirm], [keyboards.inline_bt_cancel]]))
    await state.set_state(states.Mailing.Unsubscribe)


async def stop_mailing(call: types.CallbackQuery, state: FSMContext):
    db.del_mailing_time(call.from_user.id)
    await state.clear()
    await call.answer()

    logging.info(f"unsubscribed from mailing - id: {call.from_user.id}, username: @{call.from_user.username}")

    await call.message.edit_text(
        "ü§ñ –•–æ—Ä–æ—à–æ, –±–æ–ª—å—à–µ –Ω–µ –±—É–¥—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞.")


@dp.callback_query(states.Mailing.Unsubscribe)
async def stop_mailing_from_config(call: types.CallbackQuery, state: FSMContext):
    await stop_mailing(call, state)
    

@dp.callback_query(F.data == keyboards.inline_bt_unsub.callback_data)
async def stop_mailing_from_message(call: types.CallbackQuery, state: FSMContext):
    await stop_mailing(call, state)


@dp.message(F.text == keyboards.bt_group_config.text)
async def start_group_config(msg: types.Message, state: FSMContext):
    groups = await open_groups_file()

    logging.info(f"{msg.from_user.id} (@{msg.from_user.username})")

    msg_text, inline_kb_numbers = await generate_kb_nums(groups)

    await msg.answer(f"<b>–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É —Ñ–∞–∫—É–ª—å—Ç–µ—Ç—É:</b>\n\n"
                     f"{msg_text}",
                     reply_markup=inline_kb_numbers)
    await state.set_state(states.UserData.Faculty)


@dp.callback_query(NumCallback.filter(), states.UserData.Faculty)
async def set_faculty(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    groups = await open_groups_file()
    faculty_name = list(groups.keys())[callback_data.num - 1]
    forms = groups[faculty_name]
    await state.update_data(faculty=faculty_name)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {faculty_name}")

    msg_text, inline_kb_numbers = await generate_kb_nums(forms)

    await call.message.edit_text(f"<b>–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É, "
                                 f"—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–π —Ñ–æ—Ä–º–µ –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
                                 f"{msg_text}",
                                 reply_markup=inline_kb_numbers
                                 )
    await state.set_state(states.UserData.Form)


@dp.callback_query(NumCallback.filter(), states.UserData.Form)
async def set_form(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    groups = await open_groups_file()

    data = await state.get_data()
    faculty_name = data['faculty']
    form_name = list(groups[faculty_name].keys())[callback_data.num - 1]
    await state.update_data(form=form_name)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {form_name}")

    steps = groups[faculty_name][form_name]

    msg_text, inline_kb_numbers = await generate_kb_nums(steps)

    await call.message.edit_text(f"<b>–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É, "
                                 f"—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–π —Å—Ç—É–ø–µ–Ω–∏ –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
                                 f"{msg_text}",
                                 reply_markup=inline_kb_numbers
                                 )
    await state.set_state(states.UserData.Step)


@dp.callback_query(NumCallback.filter(), states.UserData.Step)
async def set_step(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    groups = await open_groups_file()
    
    data = await state.get_data()
    faculty_name = data['faculty']
    form_name = data['form']
    step_name = list(groups[faculty_name][form_name].keys())[callback_data.num - 1]
    await state.update_data(step=step_name)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {step_name}")

    courses = groups[faculty_name][form_name][step_name]

    msg_text, inline_kb_numbers = await generate_kb_nums(courses)

    await call.message.edit_text(f"<b>–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É, "
                                 f"—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–º—É –≥–æ–¥—É –æ–±—É—á–µ–Ω–∏—è:</b>\n\n"
                                 f"{msg_text}",
                                 reply_markup=inline_kb_numbers
                                 )
    await state.set_state(states.UserData.Course)


@dp.callback_query(NumCallback.filter(), states.UserData.Course)
async def set_course(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    groups = await open_groups_file()
    
    data = await state.get_data()
    faculty_name = data['faculty']
    form_name = data['form']
    step_name = data['step']
    course_name = list(groups[faculty_name][form_name][step_name].keys())[callback_data.num - 1]
    await state.update_data(course=course_name)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {course_name}")

    groups = groups[faculty_name][form_name][step_name][course_name]

    msg_text, inline_kb_numbers = await generate_kb_nums(groups)

    await call.message.edit_text(f"<b>–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –Ω–∏–∂–µ –≤—ã–±–µ—Ä–∏—Ç–µ —Ü–∏—Ñ—Ä—É, "
                                 f"—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –≤–∞—à–µ–π –≥—Ä—É–ø–ø–µ:</b>\n\n"
                                 f"{msg_text}",
                                 reply_markup=inline_kb_numbers
                                 )
    await state.set_state(states.UserData.Group)


@dp.callback_query(NumCallback.filter(), states.UserData.Group)
async def set_group(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    groups = await open_groups_file()
    
    data = await state.get_data()
    faculty_name = data['faculty']
    form_name = data['form']
    step_name = data['step']
    course_name = data['course']
    group_name = list(groups[faculty_name][form_name][step_name][course_name].keys())[callback_data.num - 1]
    group_id = groups[faculty_name][form_name][step_name][course_name][group_name]
    await state.update_data(group_id=group_id)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {group_name} ({group_id})")

    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text='–ë–µ–∑ –ø–æ–¥–≥—Ä—É–ø–ø—ã', callback_data=NumCallback(num=0).pack()))
    builder.row(InlineKeyboardButton(text='1', callback_data=NumCallback(num=1).pack()),
                InlineKeyboardButton(text='2', callback_data=NumCallback(num=2).pack()))
    builder.row(keyboards.inline_bt_cancel)
    
    await call.message.edit_text("–ï—Å–ª–∏ —Ç–∞–∫–∞—è –µ—Å—Ç—å, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–Ω–æ–º–µ—Ä –ø–æ–¥–≥—Ä—É–ø–ø—ã.</b> "
                                 "–ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>\"–ë–µ–∑ –ø–æ–¥–≥—Ä—É–ø–ø—ã\"</b>.",
                                 reply_markup=builder.as_markup())
    await state.set_state(states.UserData.SubGroup)


@dp.callback_query(NumCallback.filter(), states.UserData.SubGroup)
async def set_subgroup(call: CallbackQuery, callback_data: NumCallback, state: FSMContext):
    await call.answer()

    data = await state.get_data()
    group_id = data['group_id']
    sub_group = int(callback_data.num)

    logging.info(f"{call.from_user.id} (@{call.from_user.username}) - {sub_group}")

    if sub_group not in range(3):
        logging.info(
            f"fail: {call.from_user.id} (@{call.from_user.username})")
        await call.message.edit_text("<b>–£–ø—Å! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–∫–∞ –º—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–ª–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É...</b>\n"
                                     "–ü—Ä–∏–¥–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –∑–∞–Ω–æ–≤–æ üòì")
        await state.clear()
        return

    db.add_user(call.from_user.id, group_id, sub_group)

    await call.message.edit_text("<b>–•–æ—Ä–æ—à–æ, –≤—Å–µ –≥–æ—Ç–æ–≤–æ!</b>\n"
                                 "–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!")
    await state.clear()
    logging.info(f"add: {call.from_user.id} (@{call.from_user.username})")
    await basic_handlers.get_help(call.message)
