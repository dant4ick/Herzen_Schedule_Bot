import logging

from aiogram import F
from aiogram.types import Message, CallbackQuery, LabeledPrice, PreCheckoutQuery
from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters import Command

from scripts.bot import dp, bot
from scripts.keyboards import inline_kb_donate
from scripts.utils import notify_admins

@dp.message(Command('donate'))
async def show_donate_methods(msg: Message):
    await msg.answer("–•–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –±–æ—Ç–∞ –∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞? –ï—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ø–æ—Å–æ–±–æ–≤:\n"
                     "üíé –û–¥–Ω–æ–∫—Ä–∞—Ç–Ω—ã–π –¥–æ–Ω–∞—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É ‚Äî —Ç—ã —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å —Ä–∞–∑–º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏.\n"
                     "üí∏ –ï–∂–µ–º–µ—Å—è—á–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚Äî –≤–∞—Ä–∏–∞–Ω—Ç –æ–¥–∏–Ω, –Ω–æ –æ–Ω –¥–æ—Å—Ç—É–ø–µ–Ω –∫–∞–∂–¥–æ–º—É.\n"
                     "‚≠ê –ò–ª–∏ –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∑–≤–µ–∑–¥–æ—á–∫–∞–º–∏!\n\n"
                     "–í—Å–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã, —Ç–∞–∫ —á—Ç–æ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—Å—Ç–∞—é—Ç—Å—è –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.",
                     reply_markup=inline_kb_donate)


@dp.callback_query(F.data == 'donate_stars')
async def donate_stars(call: CallbackQuery):
    builder = InlineKeyboardBuilder()
    for i in [25, 50, 150, 300]:
        builder.add(InlineKeyboardButton(text=f'{i} ‚≠ê', callback_data=f'stars_{i}'))
    
    await call.answer()
    await call.message.edit_text("–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–≤–µ–∑–¥–æ—á–µ–∫, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å.",
                                 reply_markup=builder.as_markup())


@dp.callback_query(F.data.startswith('stars_'))
async def donate_stars(call: CallbackQuery):    
    stars = int(call.data.split('_')[1])
    await call.message.answer_invoice(title="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞",
                                      description="–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ—Ç–∞ –∏ –µ–≥–æ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
                                      payload='donate_stars',
                                      currency='XTR', provider_token='',
                                      prices=[LabeledPrice(label='–¥–æ–Ω–∞—Ç', amount=stars)])
    
    await call.answer()
    await call.message.delete()


@dp.pre_checkout_query(F.invoice_payload == 'donate_stars')
async def donate_stars_pre_checkout(query: PreCheckoutQuery):
    await query.answer(ok=True)


@dp.message(F.successful_payment)
async def donate_stars_success(msg: Message):
    await notify_admins(f"üåü –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {msg.from_user.id} –ø–æ–¥–¥–µ—Ä–∂–∞–ª –±–æ—Ç–∞ –Ω–∞ {msg.successful_payment.total_amount} –∑–≤–µ–∑–¥–æ—á–µ–∫.")
    
    await msg.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –¢–≤–æ–∏ –∑–≤–µ–∑–¥–æ—á–∫–∏ –ø–æ–º–æ–≥—É—Ç –±–æ—Ç—É —Å—Ç–∞—Ç—å –µ—â–µ –ª—É—á—à–µ üåü")
    logging.info(f"User {msg.from_user.id} donated {msg.successful_payment.total_amount} stars.")
