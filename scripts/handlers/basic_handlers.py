import logging
from datetime import datetime, timedelta

from aiogram import types
from aiogram.dispatcher import filters, FSMContext
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton

from scripts.bot import db, dp
from scripts.handlers import keyboards
from scripts.parse import parse_date_schedule
from scripts.utils import generate_schedule_message, validate_user, get_random_chill_sticker


@dp.message_handler(commands=['start'], state='*')
async def start(msg: types.Message, state: FSMContext):
    await state.finish()
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è <b>Herzen Schedule Bot</b>! "
                     "–°–º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–µ <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>.\n"
                     "–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ —Ç—ã —É—á–∏—à—å—Å—è. "
                     "–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã\".\n"
                     "–ù–∞–∂–∏–º–∞–π –∏ –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å! –ï—Å–ª–∏ –ø—Ä–æ–º–∞—Ö–Ω–µ—à—å—Å—è –ø–æ –∫–Ω–æ–ø–∫–∞–º, —Å–Ω–∏–∑—É –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å \"–û—Ç–º–µ–Ω–∞\"",
                     reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(keyboards.bt_group_config))
    logging.info(f"start: {msg.from_user.id} (@{msg.from_user.username})")


@dp.message_handler(commands=['help'])
async def get_help(msg: types.Message):
    await msg.answer("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ \"–°–µ–≥–æ–¥–Ω—è\", \"–ó–∞–≤—Ç—Ä–∞\", "
                     "\"–≠—Ç–∞ –Ω–µ–¥–µ–ª—è\", \"–°–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è\".\n"
                     "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã\".\n"
                     "–ß—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—è—Ç–Ω–æ? –°—Ç–æ–ª–∫–Ω—É–ª–∏—Å—å —Å –ø—Ä–æ–±–ª–µ–º–æ–π? "
                     "–ü–æ –ª—é–±–æ–º—É –ø–æ–≤–æ–¥—É –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É, —Å—Å—ã–ª–∫–∞ –µ—Å—Ç—å –≤ –æ–ø–∏—Å–∞–Ω–∏–∏ –±–æ—Ç–∞. "
                     "–ù–µ –∫—É—Å–∞—é—Å—å üòâ",
                     reply_markup=keyboards.kb_main)


async def send_date_schedule(msg: types.Message, schedule_response, period: str):
    logging.info(f"response: {schedule_response}")

    if schedule_response is None:
        await msg.answer("üòñ –£–ø—Å, –∫–∞–∂–µ—Ç—Å—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")

    if "–Ω–µ–¥–µ–ª" in period:
        if "—ç—Ç–∞" in period:
            period = "—ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ"
        else:
            period = "—Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–¥–µ–ª–µ"

    if not schedule_response:
        await msg.answer(f"üéâ–ù–∞ {period} –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.")
        await msg.answer_sticker(await get_random_chill_sticker())
        return

    schedule, url = schedule_response

    if "–Ω–µ–¥–µ–ª" in period:
        if "—ç—Ç–æ–π" in period:
            period = "—ç—Ç—É –Ω–µ–¥–µ–ª—é"
        else:
            period = "—Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"

    msg_text = await generate_schedule_message(schedule)
    msg_len = len(msg_text)
    if msg_len > 4000:
        await msg.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–º, "
                         "—Ç–∞–∫ —á—Ç–æ –ø—Ä–∏–¥–µ—Ç—Å—è —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ —Å—Å—ã–ª–∫–µ...",
                         reply_markup=InlineKeyboardMarkup().add(
                             InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', f"{url}")
                         ))
        return

    await msg.answer(f"–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {period}:\n{msg_text}",
                     reply_markup=InlineKeyboardMarkup().add(
                         InlineKeyboardButton('–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ —Å–∞–π—Ç–µ', f"{url}")
                     ))


@dp.message_handler(filters.Text(contains='—Å–µ–≥–æ–¥–Ω—è', ignore_case=True))
async def send_today_schedule(msg: types.Message):
    if not await validate_user(msg):
        logging.info(f"user validation failed - id: {msg.from_user.id}, username: @{msg.from_user.username}")
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    today = datetime.today().date()

    logging.info(f"attempted send today schedule - id: {msg.from_user.id}, username: @{msg.from_user.username}")

    schedule_response = await parse_date_schedule(group=group_id, sub_group=sub_group, date_1=today)

    await send_date_schedule(msg, schedule_response, "—Å–µ–≥–æ–¥–Ω—è")


@dp.message_handler(filters.Text(contains='–∑–∞–≤—Ç—Ä–∞', ignore_case=True))
async def send_tomorrow_schedule(msg: types.Message):
    if not await validate_user(msg):
        logging.info(f"user validation failed - id: {msg.from_user.id}, username: @{msg.from_user.username}")
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    tomorrow = datetime.today().date() + timedelta(days=1)

    logging.info(f"attempted send tomorrow schedule - id: {msg.from_user.id}, username: @{msg.from_user.username}")

    schedule_response = await parse_date_schedule(group=group_id, sub_group=sub_group, date_1=tomorrow)

    await send_date_schedule(msg, schedule_response, "–∑–∞–≤—Ç—Ä–∞")


@dp.message_handler(filters.Text(contains='—ç—Ç–∞ –Ω–µ–¥–µ–ª—è', ignore_case=True))
async def send_curr_week_schedule(msg: types.Message):
    if not await validate_user(msg):
        logging.info(f"user validation failed - id: {msg.from_user.id}, username: @{msg.from_user.username}")
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    today = datetime.today().date()

    week_first = today - timedelta(days=today.weekday())
    week_last = week_first + timedelta(days=6)

    logging.info(f"attempted send curr week schedule - id: {msg.from_user.id}, username: @{msg.from_user.username}")

    schedule_response = await parse_date_schedule(group=group_id, sub_group=sub_group,
                                                  date_1=week_first, date_2=week_last)

    await send_date_schedule(msg, schedule_response, "—ç—Ç–∞ –Ω–µ–¥–µ–ª—è")


@dp.message_handler(filters.Text(contains='—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è', ignore_case=True))
async def send_next_week_schedule(msg: types.Message):
    if not await validate_user(msg):
        logging.info(f"user validation failed - id: {msg.from_user.id}, username: @{msg.from_user.username}")
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    today = datetime.today().date()

    week_first = today - timedelta(days=today.weekday()) + timedelta(days=7)
    week_last = week_first + timedelta(days=6)

    logging.info(f"attempted send next week schedule - id: {msg.from_user.id}, username: @{msg.from_user.username}")

    schedule_response = await parse_date_schedule(group=group_id, sub_group=sub_group,
                                                  date_1=week_first, date_2=week_last)

    await send_date_schedule(msg, schedule_response, "—Å–ª–µ–¥—É—é—â–∞—è –Ω–µ–¥–µ–ª—è")
