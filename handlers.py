import logging
from datetime import datetime, timedelta

from aiogram import types
from aiogram.dispatcher import filters
from aiogram.types import ReplyKeyboardMarkup

import keyboard
from bot import db, dp
from parse import parse_date_schedule
from utils import generate_schedule_message, validate_user


@dp.message_handler(commands=['start'])
async def start(msg: types.Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç, —è <b>Herzen Schedule Bot</b>! "
                     "–°–º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ —É–∑–Ω–∞—Ç—å —Ç–≤–æ–µ <b>—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>.\n"
                     "–î–ª—è —ç—Ç–æ–≥–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —è –∑–Ω–∞–ª, –≥–¥–µ —Ç—ã —É—á–∏—à—å—Å—è. "
                     "–ù–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∞—Å—å –∫–Ω–æ–ø–∫–∞ \"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã\".\n"
                     "–ù–∞–∂–∏–º–∞–π –∏ –¥–∞–≤–∞–π –Ω–∞—á–∏–Ω–∞—Ç—å!",
                     reply_markup=ReplyKeyboardMarkup(resize_keyboard=True).add(keyboard.bt_group_config))
    logging.info(f"Start: {msg.from_user.id} (@{msg.from_user.username})")


@dp.message_handler(commands=['help'])
async def get_help(msg: types.Message):
    await msg.answer("–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ \"–°–µ–≥–æ–¥–Ω—è\", \"–ó–∞–≤—Ç—Ä–∞\", \"–ù–µ–¥–µ–ª—è\".\n"
                     "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ—é –≥—Ä—É–ø–ø—É, –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫—É \"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä—É–ø–ø—ã\".",
                     reply_markup=keyboard.kb_main)


@dp.message_handler(filters.Text(contains='—Å–µ–≥–æ–¥–Ω—è', ignore_case=True))
async def send_today_schedule(msg: types.Message):
    if not await validate_user(msg):
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    today = datetime.today().date()
    schedule = parse_date_schedule(group=group_id, sub_group=sub_group, date_1=today)
    if not schedule:
        await msg.answer("üéâ –°–µ–≥–æ–¥–Ω—è –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.")
        await msg.answer_sticker('CAACAgIAAxkBAAEXjKZjC-Ky4494QMqmyAKgvTFV4fsJdQACoAwAAnUY2Et2hyIlXw_lYSkE')
        return

    msg_text = generate_schedule_message(schedule)
    await msg.answer(f"–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {today}:\n{msg_text}")


@dp.message_handler(filters.Text(contains='–∑–∞–≤—Ç—Ä–∞', ignore_case=True))
async def send_tomorrow_schedule(msg: types.Message):
    if not await validate_user(msg):
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    tomorrow = datetime.today().date() + timedelta(days=1)
    schedule = parse_date_schedule(group=group_id, sub_group=sub_group, date_1=tomorrow)
    if not schedule:
        await msg.answer("üéâ –ó–∞–≤—Ç—Ä–∞ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.")
        await msg.answer_sticker('CAACAgIAAxkBAAEXjKZjC-Ky4494QMqmyAKgvTFV4fsJdQACoAwAAnUY2Et2hyIlXw_lYSkE')
        return

    msg_text = generate_schedule_message(schedule)
    await msg.answer(f"–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {tomorrow}:\n{msg_text}")


@dp.message_handler(filters.Text(contains='–Ω–µ–¥–µ–ª—è', ignore_case=True))
async def send_week_schedule(msg: types.Message):
    if not await validate_user(msg):
        return
    group_id, sub_group = db.get_user(msg.from_user.id)

    today = datetime.today().date()
    week = datetime.today().date() + timedelta(days=6)

    schedule = parse_date_schedule(group=group_id, sub_group=sub_group, date_1=today, date_2=week)
    if not schedule:
        await msg.answer("üéâ –ù–∞ –Ω–µ–¥–µ–ª–µ –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç, –º–æ–∂–Ω–æ –æ—Ç–¥—ã—Ö–∞—Ç—å.")
        await msg.answer_sticker('CAACAgIAAxkBAAEXjKZjC-Ky4494QMqmyAKgvTFV4fsJdQACoAwAAnUY2Et2hyIlXw_lYSkE')
        return

    msg_text = generate_schedule_message(schedule)
    await msg.answer(f"–í–æ—Ç —Ç–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ ({today} ‚Äî {week}) :\n{msg_text}")
